# Однострочный комментарий

'''
Многострочный комментарий
'''

"""
Многострочный комментарий
"""

# 1. Как объявить переменную?
""" Переменная - поименованная область оперативной памяти
                 из которой данные можно прочитать
			     или в которую их можно записать

a1
A1
Две разные переменные, регистрозависимый язык

PEP-8 стандарт - почитать!!!!!!
"""
username = " root " # присвоить значение переменной
print(username)

username = " toor " # присвоить новое значение
print(username)

# Какие типы данных существуют в Python?

"""
Тип данных переменной является ее характеристикой
и описывает следующее:
- количество памяти
- диапазон допустимых значений
- допустимые операции над переменной
- формат отображения (для человека)
- 

1. Простые или скалярные
- в один момент времени хранят одно значение
  - int     - целое число
  - float   - число с плавающей точкой (дробь)
  - bool    - логическое значение
  - complex - комплексное число
  - str     - строка
  - bytes   - only Py3 - байтовая строка
2. Структурные (составные, сложные) типы данных
- в один момент времени хранят 
  любое кол-во значений любого типа
  - tuple  - кортеж
  - list   - список
  - set    - множество
  - dict   - словарь
  - object - объекты
3. Специальные типы
  - None - пустота, отсутствие значения
"""

a = None


# bool    - логическое значение
flag1 = True
flag2 = False


# int     - целое число
i1 = 666
i2 = 0b10101 # двочиная
i3 = 0o755   # 8-ая
i4 = 0xaf    # 16-ая


# float
f1 = 1.23
f2 = 1e-3 # 0.001
f3 = 1e6  # 1000000.0


# complex
c1 = 3.14j

# str 
s1 = 'str"ing'
s2 = "str\"ing \\!!!"   # \ - экранирование
s3 = '''

Много""ст'рочная строка

'''
s4 = """

Многострочная строка 
"""
s5 = r'^\d+$' # сырая строка (как написали так и используется, без экранирования raw)
s6 = u'Unicode in Python 2'


# bytes
s7 = b'Hello' # байтовая строка (набор байтов, без кодировки)


# typle - кортежи
t1 = (1, 1.5, True, "string", (1, 2, 3)) # индексы считаются с нуля(string- это 3)
print(t1[3])
t2 = (546, ) #если один элемент, ставится запятая
#кортеж поменять не получится


# list - списки
l1 = [(1,), [2], 'str']
print(l1[0]) # (1,)
print(l1[0][0]) # 1
#список можно поменять
l1[0] = False
print(l1[0]) # False


#set - множества
s1 = {1, 1, 2, 2, 3, 3}
# индексы в нем неизвестны; расставляет их по алфавиту, по возрастанию или хз как..; во множестве элементы уникальные (будут по одному разу)
s2 = set() #пустое множество

# dict - словари, неупорядоченный тип данных
d1 = {
	'id': 1,
	'name': 'Linus',
	'is_developer': True
	'skills': ('C++' 'Linux')
	'address': {
	    'street': ''
	}
}
print(d1['id']) # 1
print(d1['name']) # Linus
d1['any'] = 123


# Как определить тип данных переменной?
print(type(d1))


# Как выполнить явное приведение перемнной к типу?
i = '666'
i = int (i)
print(i, type(i)) # 666, int

"""
Типы данных бывают изменяемые и не изменяемые
immutable (неизменяемые):
- bool, int, float, str, complex, bytes (все скалярные), tuple(кортеж)
mutable (изменяемые): 
- list, dict, set, object (все структурные, кроме кортежа)
"""




# Какие операторы существуют в Python?
"""
Операторы позволяют выполнять операции над переменными.

Арифметические:  + - * / % **  //
Сравнения:       ==(равно) !=(не равно) <>(не равно) > < >= <=
Присваивания:    = += -= *= %= **= //=
Логические:      and or not
Побитовые:       & | ~ ^ << >>
Принадлежности:  in
                 not in
Тождетсвенности: is
                 not is
"""



# Ветвление
a = 1
b = 2
 
if a < b:
    print('a < b')
elif a == b:
	print('a = b')
elif a is b:
	pass # пустой блок
else:
	print('a > b')


# Тернарный оператор

if True:
	username = 'Вася'
else:
	username = 'Петя'

username = 'Вася' if True else 'Петя' # если одна инструкция

# Циклы

i = 10
while i:      # когда i станет нулем, цикл прекратится; итерация - один проход цикла
	if i % 2:
		print(i)
	i -= 1


i = 0
while i:  
    i += 1

	if i % 2:
			continue # пропускает текущую итерацию (осуждается)

		print(i)

	if i == 10

		break # мгновенное завершение цикла

	


lst = [1, 2, 3]
for i in  lst:
	print('Элемент списка:', i)

for i in range(10): # конец промежутка от 0-9, 10 не входит
	print(i)

for i in range (10, 15): # первая цифра - начало, вторая - конец
	print(i)

for i in range(10, 21, 2): #последняя цифра - шаг
	print(i)

for i in enumerate(range(10,21,2)): # можно пронумеровать любую последовательность
	print(i)

for key, value in enumerate(range(10,21,2)): # чтобы разделить нумерацию значений и значения
	print(key, value)


for i in d1:
	print(i)

for key, value in d1.items(): # так перебираем словари
	print(key, value)


# Срезы

s = 'Hello, Python'
s[0]
s[0:5]
s[:5]
s[1:5]
s[::2] # 2 - шаг
s[5:8:2]
s[::-1] # строка наоборот
s[::2]
s[-1:] # отрезается от конца строки





#списки и срезы
l =[1, 2, 3, 4, 5]
l = list(range(10))
l[::-1] # список наоборот

l[::]
l2 = l[::]
l
l2
l == l2 # True
l is l2 # False
l[5:7]
l[1:7:2]
l[::2] # чтобы были все четные
# в результате всегда получается новый список, из исходного ничего не вырезаем



"""
Функции для работы со списками и методы списков
len() - длина списка
l.append(e) - добавить элемент в конец списка
l.insert(index, e) - добавить элемент в указанную позицию (под указанный индекс)
"""

lst = list(range(10))
print('Длина списка:', len(lst))

lst.append(10) #добавили 10 в конец списка

lst.insert(0, -1) # на нулевую позицию -1


s = []

for c in range(ord('a'), ord('z') + 1):
	s.append(chr(c))
	print(''.join(s))

input()
int(input())
print()